var opts = {
	send: true,
	minifyJS: true,
	minifyCSS: true,
	minifyHTML: true,
	sendFile: true,
	static: true,
	cssOptions: {
		level: 2
	},
	htmlOptions: {
		minifyURLs: true,
		useShortDoctype: true,
		removeScriptTypeAttributes: true,
		removeStyleLinkTypeAttributes: true,
		removeComments: true,
		removeAttributeQuotes: true,
		preventAttributesEscaping: true,
		includeAutoGeneratedTags: true,
		minifyCSS: true,
		minifyJS: true,
		collapseWhitespace: true,
		conservativeCollapse: true,
		decodeEntities: true,
		html5: true,
		preserveLineBreaks: true,
		removeOptionalTags: true,
		customAttrSurround: [
			[/@/, new RegExp('')],
			[/:/, new RegExp('')]
		]
	}
}

module.exports = (app, options) => {
	opts = {
		...opts,
		...options
	};
	console.log(opts)
	init(app);
	minify = memoize(minify);
	return use;
}

module.exports.cache = cache;

async function init(app) {
	if (!opts.static) return;
	var express = require("express")
	app.use(use);
	express.static = (dir) => {
		//Pre-minify
		cache(dir, "no-log");
		let fs = require("fs");
		let files = fs.readdirSync(dir);
		if (files.includes("index.html")) {
			app.get("/", (req, res) => {
				sendFile(`${dir}/index.html`, res)
			})
		}
		for (let file of files) {
			app.get(`/${file}`, (req, res) => {
				sendFile(`${dir}/${file}`, res)
			})
		}
		return (req, res, next) => next()
	}
}

function cache(dirs, log) {
	if (typeof dirs == "string") {
		dirs = [dirs];
	}
	dirs.forEach(async (dir) => {
		let fs = require("fs");
		let files = fs.readdirSync(dir);
		files = files.filter(file => file.endsWith(".js") || file.endsWith(".css") || file.endsWith(".html"));
		for (let file of files) {
			var type;
			file = file.toLowerCase();
			if (file.endsWith(".js")) {
				type = "application/javascript"
			}
			if (file.endsWith(".css")) {
				type = "text/css"
			}
			if (file.endsWith(".html")) {
				type = "text/html"
			}
			let start = Date.now()
			if (log !== "no-log") {
				console.log(`Minifying ${file}`)
			}
			await minify(fs.readFileSync(`${dir}/${file}`, "utf8"), type)
			if (log !== "no-log") {
				console.log(`Minified ${file} (${Date.now() - start}ms)`)
			}
		}
	})
}

async function use(req, res, next) {
	var fs = require("fs")
	if (opts.send) {
		let send = res.send;
		res.send = async function() {
			arguments[0] = await minify(arguments[0], "html");
			send.apply(res, arguments);
		};
	}
	if (opts.sendFile) {
		res.sendFile = (file, res) => sendFile(file, res)
	}
	return next();
}
async function sendFile(file, res) {
	var fs = require("fs")
	if (!(file.endsWith(".js") || file.endsWith(".css") || file.endsWith(".html"))) {
		const mime = require('mime');
		let data = fs.readFileSync(file);
		res.writeHead(200, {
			'Content-Type': mime.getType(file.match(/.+\.(.+)/)[1]),
			'Content-Length': data.length
		});
		res.end(data);
		return;
	}
	var data = fs.readFileSync(file, "utf8");
	var type;
	file = file.toLowerCase();
	if (file.endsWith(".js")) {
		type = "application/javascript"
	}
	if (file.endsWith(".css")) {
		type = "text/css"
	}
	if (file.endsWith(".html")) {
		type = "text/html"
	}
	let buf = Buffer.from(await minify(data, type))
	res.writeHead(200, {
		'Content-Type': type,
		'Content-Length': buf.length
	});
	res.end(buf);
}
async function minify(code, format = "html") {
	format = format.replace(/^[^\/]+\//, "").toLowerCase().replace("javascript", "js")
	let formats = [];
	if (opts.minifyCSS) {
		formats.push("css");
	}
	if (opts.minifyJS) {
		formats.push("js");
	}
	if (opts.minifyHTML) {
		formats.push("html")
	}
	if (!formats.includes(format)) {
		return code;
	}
	const {
		minify: jsMinify
	} = require("terser");
	var {
		minify: htmlMinify
	} = require('html-minifier');
	var minified
	if (format === "js") {
		minified = (await jsMinify(code)).code
	}
	if (format === "css") {
		var CleanCSS = require('clean-css');
		minified = new CleanCSS(opts.cssOptions).minify(code);
		minified = minified.styles
	}
	if (format === "html") {
		minified = await htmlMinify(code, opts.htmlOptions)
	}
	return minified;
}

function memoize(fn) {
	var cacheName = `_cache_${hash(fn.toString())}`
	global[cacheName] = {};
	return function() {
		let args = JSON.stringify(Array.from(arguments));
		let arg_array = Array.from(arguments);
		if (global[cacheName][args]) {
			return global[cacheName][args];
		} else {
			global[cacheName][args] = fn(...arg_array);
			return global[cacheName][args];
		}
	};
};

function hash(str, seed = 0) {
	let h1 = 0xdeadbeef ^ seed,
		h2 = 0x41c6ce57 ^ seed;
	for (let i = 0, ch; i < str.length; i++) {
		ch = str.charCodeAt(i);
		h1 = Math.imul(h1 ^ ch, 2654435761);
		h2 = Math.imul(h2 ^ ch, 1597334677);
	}
	h1 =
		Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^
		Math.imul(h2 ^ (h2 >>> 13), 3266489909);
	h2 =
		Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^
		Math.imul(h1 ^ (h1 >>> 13), 3266489909);
	return 4294967296 * (2097151 & h2) + (h1 >>> 0);
};
